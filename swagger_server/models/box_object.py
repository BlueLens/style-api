# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.box import Box  # noqa: F401,E501
from swagger_server import util


class BoxObject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, box: Box=None, image_id: str=None, version_id: str=None, class_code: str=None, color_code: str=None, color_score: float=None, score: float=None):  # noqa: E501
        """BoxObject - a model defined in Swagger

        :param id: The id of this BoxObject.  # noqa: E501
        :type id: str
        :param box: The box of this BoxObject.  # noqa: E501
        :type box: Box
        :param image_id: The image_id of this BoxObject.  # noqa: E501
        :type image_id: str
        :param version_id: The version_id of this BoxObject.  # noqa: E501
        :type version_id: str
        :param class_code: The class_code of this BoxObject.  # noqa: E501
        :type class_code: str
        :param color_code: The color_code of this BoxObject.  # noqa: E501
        :type color_code: str
        :param color_score: The color_score of this BoxObject.  # noqa: E501
        :type color_score: float
        :param score: The score of this BoxObject.  # noqa: E501
        :type score: float
        """
        self.swagger_types = {
            'id': str,
            'box': Box,
            'image_id': str,
            'version_id': str,
            'class_code': str,
            'color_code': str,
            'color_score': float,
            'score': float
        }

        self.attribute_map = {
            'id': 'id',
            'box': 'box',
            'image_id': 'image_id',
            'version_id': 'version_id',
            'class_code': 'class_code',
            'color_code': 'color_code',
            'color_score': 'color_score',
            'score': 'score'
        }

        self._id = id
        self._box = box
        self._image_id = image_id
        self._version_id = version_id
        self._class_code = class_code
        self._color_code = color_code
        self._color_score = color_score
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'BoxObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoxObject of this BoxObject.  # noqa: E501
        :rtype: BoxObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BoxObject.


        :return: The id of this BoxObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BoxObject.


        :param id: The id of this BoxObject.
        :type id: str
        """

        self._id = id

    @property
    def box(self) -> Box:
        """Gets the box of this BoxObject.


        :return: The box of this BoxObject.
        :rtype: Box
        """
        return self._box

    @box.setter
    def box(self, box: Box):
        """Sets the box of this BoxObject.


        :param box: The box of this BoxObject.
        :type box: Box
        """

        self._box = box

    @property
    def image_id(self) -> str:
        """Gets the image_id of this BoxObject.


        :return: The image_id of this BoxObject.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id: str):
        """Sets the image_id of this BoxObject.


        :param image_id: The image_id of this BoxObject.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def version_id(self) -> str:
        """Gets the version_id of this BoxObject.


        :return: The version_id of this BoxObject.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id: str):
        """Sets the version_id of this BoxObject.


        :param version_id: The version_id of this BoxObject.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def class_code(self) -> str:
        """Gets the class_code of this BoxObject.


        :return: The class_code of this BoxObject.
        :rtype: str
        """
        return self._class_code

    @class_code.setter
    def class_code(self, class_code: str):
        """Sets the class_code of this BoxObject.


        :param class_code: The class_code of this BoxObject.
        :type class_code: str
        """

        self._class_code = class_code

    @property
    def color_code(self) -> str:
        """Gets the color_code of this BoxObject.


        :return: The color_code of this BoxObject.
        :rtype: str
        """
        return self._color_code

    @color_code.setter
    def color_code(self, color_code: str):
        """Sets the color_code of this BoxObject.


        :param color_code: The color_code of this BoxObject.
        :type color_code: str
        """

        self._color_code = color_code

    @property
    def color_score(self) -> float:
        """Gets the color_score of this BoxObject.


        :return: The color_score of this BoxObject.
        :rtype: float
        """
        return self._color_score

    @color_score.setter
    def color_score(self, color_score: float):
        """Sets the color_score of this BoxObject.


        :param color_score: The color_score of this BoxObject.
        :type color_score: float
        """

        self._color_score = color_score

    @property
    def score(self) -> float:
        """Gets the score of this BoxObject.


        :return: The score of this BoxObject.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this BoxObject.


        :param score: The score of this BoxObject.
        :type score: float
        """

        self._score = score
