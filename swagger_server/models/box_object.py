# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.box import Box
from swagger_server.models.image import Image
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class BoxObject(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, box: Box=None, image_id: str=None, version_id: str=None, class_code: str=None, score: float=None, images: List[Image]=None):
        """
        BoxObject - a model defined in Swagger

        :param id: The id of this BoxObject.
        :type id: str
        :param box: The box of this BoxObject.
        :type box: Box
        :param image_id: The image_id of this BoxObject.
        :type image_id: str
        :param version_id: The version_id of this BoxObject.
        :type version_id: str
        :param class_code: The class_code of this BoxObject.
        :type class_code: str
        :param score: The score of this BoxObject.
        :type score: float
        :param images: The images of this BoxObject.
        :type images: List[Image]
        """
        self.swagger_types = {
            'id': str,
            'box': Box,
            'image_id': str,
            'version_id': str,
            'class_code': str,
            'score': float,
            'images': List[Image]
        }

        self.attribute_map = {
            'id': 'id',
            'box': 'box',
            'image_id': 'image_id',
            'version_id': 'version_id',
            'class_code': 'class_code',
            'score': 'score',
            'images': 'images'
        }

        self._id = id
        self._box = box
        self._image_id = image_id
        self._version_id = version_id
        self._class_code = class_code
        self._score = score
        self._images = images

    @classmethod
    def from_dict(cls, dikt) -> 'BoxObject':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoxObject of this BoxObject.
        :rtype: BoxObject
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this BoxObject.

        :return: The id of this BoxObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this BoxObject.

        :param id: The id of this BoxObject.
        :type id: str
        """

        self._id = id

    @property
    def box(self) -> Box:
        """
        Gets the box of this BoxObject.

        :return: The box of this BoxObject.
        :rtype: Box
        """
        return self._box

    @box.setter
    def box(self, box: Box):
        """
        Sets the box of this BoxObject.

        :param box: The box of this BoxObject.
        :type box: Box
        """

        self._box = box

    @property
    def image_id(self) -> str:
        """
        Gets the image_id of this BoxObject.

        :return: The image_id of this BoxObject.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id: str):
        """
        Sets the image_id of this BoxObject.

        :param image_id: The image_id of this BoxObject.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def version_id(self) -> str:
        """
        Gets the version_id of this BoxObject.

        :return: The version_id of this BoxObject.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id: str):
        """
        Sets the version_id of this BoxObject.

        :param version_id: The version_id of this BoxObject.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def class_code(self) -> str:
        """
        Gets the class_code of this BoxObject.

        :return: The class_code of this BoxObject.
        :rtype: str
        """
        return self._class_code

    @class_code.setter
    def class_code(self, class_code: str):
        """
        Sets the class_code of this BoxObject.

        :param class_code: The class_code of this BoxObject.
        :type class_code: str
        """

        self._class_code = class_code

    @property
    def score(self) -> float:
        """
        Gets the score of this BoxObject.

        :return: The score of this BoxObject.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """
        Sets the score of this BoxObject.

        :param score: The score of this BoxObject.
        :type score: float
        """

        self._score = score

    @property
    def images(self) -> List[Image]:
        """
        Gets the images of this BoxObject.

        :return: The images of this BoxObject.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images: List[Image]):
        """
        Sets the images of this BoxObject.

        :param images: The images of this BoxObject.
        :type images: List[Image]
        """

        self._images = images

