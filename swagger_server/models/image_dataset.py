# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.box_dataset import BoxDataset
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ImageDataset(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, bbox: BoxDataset=None, category_class: str=None, category_name: str=None, height: int=None, width: int=None, source: str=None, url: str=None, url_with_box: str=None):
        """
        ImageDataset - a model defined in Swagger

        :param id: The id of this ImageDataset.
        :type id: str
        :param bbox: The bbox of this ImageDataset.
        :type bbox: BoxDataset
        :param category_class: The category_class of this ImageDataset.
        :type category_class: str
        :param category_name: The category_name of this ImageDataset.
        :type category_name: str
        :param height: The height of this ImageDataset.
        :type height: int
        :param width: The width of this ImageDataset.
        :type width: int
        :param source: The source of this ImageDataset.
        :type source: str
        :param url: The url of this ImageDataset.
        :type url: str
        :param url_with_box: The url_with_box of this ImageDataset.
        :type url_with_box: str
        """
        self.swagger_types = {
            'id': str,
            'bbox': BoxDataset,
            'category_class': str,
            'category_name': str,
            'height': int,
            'width': int,
            'source': str,
            'url': str,
            'url_with_box': str
        }

        self.attribute_map = {
            'id': 'id',
            'bbox': 'bbox',
            'category_class': 'category_class',
            'category_name': 'category_name',
            'height': 'height',
            'width': 'width',
            'source': 'source',
            'url': 'url',
            'url_with_box': 'url_with_box'
        }

        self._id = id
        self._bbox = bbox
        self._category_class = category_class
        self._category_name = category_name
        self._height = height
        self._width = width
        self._source = source
        self._url = url
        self._url_with_box = url_with_box

    @classmethod
    def from_dict(cls, dikt) -> 'ImageDataset':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ImageDataset of this ImageDataset.
        :rtype: ImageDataset
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this ImageDataset.

        :return: The id of this ImageDataset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this ImageDataset.

        :param id: The id of this ImageDataset.
        :type id: str
        """

        self._id = id

    @property
    def bbox(self) -> BoxDataset:
        """
        Gets the bbox of this ImageDataset.

        :return: The bbox of this ImageDataset.
        :rtype: BoxDataset
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox: BoxDataset):
        """
        Sets the bbox of this ImageDataset.

        :param bbox: The bbox of this ImageDataset.
        :type bbox: BoxDataset
        """

        self._bbox = bbox

    @property
    def category_class(self) -> str:
        """
        Gets the category_class of this ImageDataset.

        :return: The category_class of this ImageDataset.
        :rtype: str
        """
        return self._category_class

    @category_class.setter
    def category_class(self, category_class: str):
        """
        Sets the category_class of this ImageDataset.

        :param category_class: The category_class of this ImageDataset.
        :type category_class: str
        """

        self._category_class = category_class

    @property
    def category_name(self) -> str:
        """
        Gets the category_name of this ImageDataset.

        :return: The category_name of this ImageDataset.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name: str):
        """
        Sets the category_name of this ImageDataset.

        :param category_name: The category_name of this ImageDataset.
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def height(self) -> int:
        """
        Gets the height of this ImageDataset.

        :return: The height of this ImageDataset.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """
        Sets the height of this ImageDataset.

        :param height: The height of this ImageDataset.
        :type height: int
        """

        self._height = height

    @property
    def width(self) -> int:
        """
        Gets the width of this ImageDataset.

        :return: The width of this ImageDataset.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """
        Sets the width of this ImageDataset.

        :param width: The width of this ImageDataset.
        :type width: int
        """

        self._width = width

    @property
    def source(self) -> str:
        """
        Gets the source of this ImageDataset.

        :return: The source of this ImageDataset.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """
        Sets the source of this ImageDataset.

        :param source: The source of this ImageDataset.
        :type source: str
        """

        self._source = source

    @property
    def url(self) -> str:
        """
        Gets the url of this ImageDataset.

        :return: The url of this ImageDataset.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """
        Sets the url of this ImageDataset.

        :param url: The url of this ImageDataset.
        :type url: str
        """

        self._url = url

    @property
    def url_with_box(self) -> str:
        """
        Gets the url_with_box of this ImageDataset.

        :return: The url_with_box of this ImageDataset.
        :rtype: str
        """
        return self._url_with_box

    @url_with_box.setter
    def url_with_box(self, url_with_box: str):
        """
        Sets the url_with_box of this ImageDataset.

        :param url_with_box: The url_with_box of this ImageDataset.
        :type url_with_box: str
        """

        self._url_with_box = url_with_box

